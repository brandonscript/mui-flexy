{"version":3,"file":"Flex.utils.js","sources":["../src/Flex.utils.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\n\nimport {\n  FlexBoxProps,\n  type FlexGrid2Props,\n  FlexGridProps,\n  type ResponsiveFlexBoolean,\n  ResponsiveFlexDirection,\n  ResponsiveFlexPosition,\n} from \"./Flex.types\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype _Any = any;\n\nconst mapAlignment = (alignment?: _Any): ResponsiveFlexPosition => {\n  if (!alignment) return;\n  if (typeof alignment === \"string\") {\n    switch (alignment) {\n      case \"top\":\n      case \"left\":\n        return \"flex-start\";\n      case \"bottom\":\n      case \"right\":\n        return \"flex-end\";\n      default:\n        return alignment as ResponsiveFlexPosition;\n    }\n  } else if (Array.isArray(alignment)) {\n    return alignment.map(a => mapAlignment(a)) as ResponsiveFlexPosition;\n  } else if (typeof alignment === \"object\") {\n    return Object.fromEntries(\n      Object.entries(alignment).map(([k, a]) => [k, mapAlignment(a)])\n    ) as ResponsiveFlexPosition;\n  }\n};\n\nconst mapDirection = (\n  direction: ResponsiveFlexDirection | undefined | null,\n  reverse: boolean | undefined | null = false\n): ResponsiveFlexDirection => {\n  if (!direction) return \"row\";\n  if (typeof direction === \"string\") {\n    if (![\"row\", \"row-reverse\", \"column\", \"column-reverse\"].includes(direction)) {\n      console.warn(\n        `Using { flex-direction: ${direction} } with mui-flexy shorthand is not recommended \\\nbecause it can cause unexpected alignment and orientation anomalies.`\n      );\n    }\n    switch (direction) {\n      case \"row\":\n      case \"column\":\n        return `${direction}${reverse ? \"-reverse\" : \"\"}`;\n      default:\n        return direction;\n    }\n  } else if (Array.isArray(direction)) {\n    return direction.map(d => (!d ? \"row\" : mapDirection(d, reverse))) as ResponsiveFlexDirection;\n  } else if (typeof direction === \"object\") {\n    return Object.fromEntries(\n      Object.entries(direction).map(([k, d]) => [\n        k,\n        mapDirection(d as ResponsiveFlexDirection, reverse),\n      ])\n    ) as ResponsiveFlexDirection;\n  }\n};\n\nconst stringOrArrayValue = <V = unknown>(value: V, index: number) => {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value?.[index];\n  }\n};\n\nconst mapResponsiveObject = (\n  direction: { [key: string]: CSSProperties[\"flexDirection\"] | null } | undefined | null,\n  main: ResponsiveFlexPosition,\n  cross: ResponsiveFlexPosition\n) => {\n  return Object.fromEntries(\n    Object.entries(direction ?? []).map(([key, d]) => {\n      if (typeof d !== \"string\") {\n        throw new Error(\n          \"Values for a flex direction ResponsiveStyleObject must be strings, e.g. { xs: 'row', sm: 'column' }\"\n        );\n      }\n      if (d.startsWith(\"column\")) {\n        return [\n          key,\n          typeof cross === \"string\" ? cross : mapAlignment(cross)?.[key as keyof typeof cross],\n        ];\n      } else {\n        return [\n          key,\n          typeof main === \"string\" ? main : mapAlignment(main)?.[key as keyof typeof main],\n        ];\n      }\n    })\n  );\n};\n\nconst resolveAlignment = (\n  direction: ResponsiveFlexDirection,\n  x: ResponsiveFlexPosition,\n  y: ResponsiveFlexPosition\n) => {\n  if (typeof direction === \"string\") {\n    const isColumn = direction.startsWith(\"column\");\n    return {\n      justifyContent: mapAlignment(isColumn ? y : x),\n      alignItems: mapAlignment(isColumn ? x : y),\n    };\n  }\n\n  if (Array.isArray(direction)) {\n    return {\n      justifyContent: direction.map((d, i) =>\n        stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? y : x), i)\n      ),\n      alignItems: direction.map((d, i) =>\n        stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? x : y), i)\n      ),\n    };\n  }\n\n  if (typeof direction === \"object\") {\n    return {\n      justifyContent: mapResponsiveObject(direction, x, y),\n      alignItems: mapResponsiveObject(direction, y, x),\n    };\n  }\n\n  return { justifyContent: x, alignItems: y };\n};\n\ntype CSSFlexDirection = CSSProperties[\"flexDirection\"];\nconst resolveDirection = <R extends ResponsiveFlexDirection = ResponsiveFlexDirection>(\n  row: ResponsiveFlexDirection | ResponsiveFlexBoolean | undefined | null,\n  column: ResponsiveFlexDirection | ResponsiveFlexBoolean | undefined | null,\n  reverse: boolean | undefined | null = false,\n  fallback: ResponsiveFlexDirection = \"row\"\n): R | CSSFlexDirection | undefined => {\n  /* Maps boolean responsive row/column props to flexDirection values */\n\n  const rowIsNullOrUndefined = row === null || row === undefined;\n  const columnIsNullOrUndefined = column === null || column === undefined;\n\n  if (rowIsNullOrUndefined && columnIsNullOrUndefined) {\n    return mapDirection(fallback, reverse) as R;\n  }\n\n  const rowIsFalse = row === false;\n  const columnIsFalse = column === false;\n\n  let chooseRow = [true, \"row\"].includes(row as _Any) || columnIsFalse || columnIsNullOrUndefined;\n  let chooseColumn =\n    [true, \"column\"].includes(column as _Any) || rowIsFalse || rowIsNullOrUndefined;\n\n  if (rowIsFalse && !columnIsFalse) {\n    chooseRow = false;\n    chooseColumn = true;\n  } else if (columnIsFalse && !rowIsFalse) {\n    chooseColumn = false;\n    chooseRow = true;\n  } else if (chooseRow && chooseColumn) {\n    chooseColumn = false;\n  }\n\n  const rowIsArray = Array.isArray(row);\n  const columnIsArray = Array.isArray(column);\n\n  const rowIsObject = typeof row === \"object\" && !rowIsArray && !rowIsNullOrUndefined;\n  const columnIsObject = typeof column === \"object\" && !columnIsArray && !columnIsNullOrUndefined;\n\n  if ([!rowIsObject, !columnIsObject, !rowIsArray, !columnIsArray].every(Boolean)) {\n    return mapDirection(chooseColumn ? \"column\" : chooseRow ? \"row\" : fallback, reverse) as R;\n  }\n\n  const rowIsFalsy =\n    !row || (rowIsArray && !row.length) || (rowIsObject && !Object.keys(row).length);\n  const columnIsFalsy =\n    !column || (columnIsArray && !column.length) || (columnIsObject && !Object.keys(column).length);\n\n  if (rowIsArray && columnIsFalsy) {\n    return row.map(r => resolveDirection(r, column, reverse, fallback)) as R;\n  }\n\n  if (columnIsArray && rowIsFalsy) {\n    return column.map(c => resolveDirection(row, c, reverse, fallback)) as R;\n  }\n\n  if (rowIsArray && columnIsArray) {\n    const composite: ResponsiveFlexDirection = [];\n    if (row.length !== column.length) {\n      console.warn(\n        `When using Array type ResponsiveFlexDirection for both 'row' and 'column', they should be the same length (have the same number of breakpoints) - got row=${JSON.stringify(\n          row\n        )} and column=${JSON.stringify(column)}. You probably want to use just one or the other.`\n      );\n\n      const longestLength = Math.max(row.length, column.length);\n\n      for (let i = 0; i < longestLength; i++) {\n        const r = row[i] ?? (column[i] === \"column\" ? \"row\" : \"column\");\n        const c = column[i] ?? (row[i] === \"row\" ? \"column\" : \"row\");\n        composite.push(resolveDirection(r, c, reverse, fallback) as CSSFlexDirection);\n      }\n      return composite as R;\n    }\n\n    // if any of the values in each array are both true for the same array index, warn in the console and default to 'row'\n    return row.map((r, i) => {\n      let c = column[i];\n      if (r && c) {\n        console.warn(\n          `When using Array type ResponsiveFlexDirection for both 'row' and 'column', they cannot not both be true for the same breakpoint index - got row=${JSON.stringify(\n            row\n          )} and column=${JSON.stringify(column)}. Defaulting to 'row' for conflicting indices.`\n        );\n        c = false;\n      }\n      return resolveDirection(r, c, reverse, fallback) as CSSFlexDirection;\n    }) as R;\n  }\n\n  if (rowIsObject && columnIsFalsy) {\n    return Object.fromEntries(\n      Object.entries(row)\n        .filter(([, r]) => ![null, undefined].includes(r))\n        .map(([k, r]) => [k, resolveDirection(r, undefined, reverse, fallback)])\n    ) as R;\n  }\n\n  if (columnIsObject && rowIsFalsy) {\n    return Object.fromEntries(\n      Object.entries(column)\n        .filter(([, r]) => ![null, undefined].includes(r))\n        .map(([k, c]) => [k, resolveDirection(undefined, c, reverse, fallback)])\n    ) as R;\n  }\n\n  if (rowIsObject && columnIsObject) {\n    const composite: { [key: string]: CSSFlexDirection } = {};\n    const keys = new Set([...Object.keys(row), ...Object.keys(column)]);\n\n    for (const key of keys) {\n      const r = row[key];\n      const c = column[key];\n      if ([null, undefined].includes(r as _Any) && [null, undefined].includes(c as _Any)) {\n        // if both are empty, omit the key\n        continue;\n      }\n      composite[key] = resolveDirection(r, c, reverse, fallback) as CSSFlexDirection;\n    }\n    return composite as R;\n  }\n};\n\nexport const mapFlexProps = <P extends FlexBoxProps | FlexGridProps | FlexGrid2Props>(\n  props: Partial<FlexBoxProps | FlexGridProps | FlexGrid2Props>,\n  ref?: React.Ref<_Any> | null,\n  componentName: \"Box\" | \"Grid\" | \"Grid2\" = \"Box\"\n) => {\n  const { x, y, row, column, flexDirection, reverse, nowrap, ...rest } = props;\n\n  const direction = resolveDirection(\n    row,\n    column,\n    reverse,\n    flexDirection as ResponsiveFlexDirection\n  );\n\n  const whiteSpace = nowrap ? \"nowrap\" : props.whiteSpace;\n  const flexProps = { display: rest.display || \"flex\", whiteSpace };\n  const className = `${props.className || \"\"} MuiFlex-root${\n    componentName ? ` MuiFlex${componentName}-root` : \"\"\n  }`;\n\n  const alignments = resolveAlignment(direction, x, y);\n\n  return {\n    ...rest,\n    ...flexProps,\n    ...alignments,\n    flexDirection: direction,\n    className,\n    ref,\n  } as unknown as P;\n};\n\nexport const _test = {\n  mapAlignment,\n  mapDirection,\n  mapFlexProps,\n  resolveDirection,\n};\n"],"names":["mapAlignment","alignment","Array","isArray","map","a","Object","fromEntries","entries","k","mapDirection","direction","reverse","includes","console","warn","d","stringOrArrayValue","value","index","mapResponsiveObject","main","cross","key","Error","startsWith","resolveAlignment","x","y","isColumn","justifyContent","alignItems","i","resolveDirection","row","column","fallback","rowIsNullOrUndefined","undefined","columnIsNullOrUndefined","rowIsFalse","columnIsFalse","chooseRow","chooseColumn","rowIsArray","columnIsArray","rowIsObject","columnIsObject","every","Boolean","rowIsFalsy","length","keys","columnIsFalsy","r","c","composite","JSON","stringify","longestLength","Math","max","push","filter","Set","mapFlexProps","props","ref","componentName","flexDirection","nowrap","rest","whiteSpace","flexProps","display","className","alignments"],"mappings":"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"}