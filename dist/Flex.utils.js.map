{"version":3,"file":"Flex.utils.js","sources":["../src/Flex.utils.ts"],"sourcesContent":["import type { BoxProps, Grid2Props, GridProps } from \"@mui/material\";\nimport { CSSProperties } from \"react\";\n\nimport {\n  type InferFlexProps,\n  type ResponsiveFlexBoolean,\n  ResponsiveFlexDirection,\n  ResponsiveFlexPosition,\n} from \"./Flex.types\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype _Any = any;\n\nconst mapAlignment = (alignment?: _Any): ResponsiveFlexPosition => {\n  if (!alignment) return;\n  if (typeof alignment === \"string\") {\n    switch (alignment) {\n      case \"top\":\n      case \"left\":\n        return \"flex-start\";\n      case \"bottom\":\n      case \"right\":\n        return \"flex-end\";\n      default:\n        return alignment as ResponsiveFlexPosition;\n    }\n  } else if (Array.isArray(alignment)) {\n    return alignment.map((a) => mapAlignment(a)) as ResponsiveFlexPosition;\n  } else if (typeof alignment === \"object\") {\n    return Object.fromEntries(\n      Object.entries(alignment).map(([k, a]) => [k, mapAlignment(a)]),\n    ) as ResponsiveFlexPosition;\n  }\n};\n\nconst mapDirection = (\n  direction: ResponsiveFlexDirection | undefined | null,\n  reverse: boolean | undefined | null = false,\n): ResponsiveFlexDirection => {\n  if (!direction) return \"row\";\n  if (typeof direction === \"string\") {\n    if (![\"row\", \"row-reverse\", \"column\", \"column-reverse\"].includes(direction)) {\n      console.warn(\n        `Using { flex-direction: ${direction} } with mui-flexy shorthand is not recommended \\\nbecause it can cause unexpected alignment and orientation anomalies.`,\n      );\n    }\n    switch (direction) {\n      case \"row\":\n      case \"column\":\n        return `${direction}${reverse ? \"-reverse\" : \"\"}`;\n      default:\n        return direction;\n    }\n  } else if (Array.isArray(direction)) {\n    return direction.map((d) => (!d ? \"row\" : mapDirection(d, reverse))) as ResponsiveFlexDirection;\n  } else if (typeof direction === \"object\") {\n    return Object.fromEntries(\n      Object.entries(direction).map(([k, d]) => [k, mapDirection(d as ResponsiveFlexDirection, reverse)]),\n    ) as ResponsiveFlexDirection;\n  }\n};\n\nconst stringOrArrayValue = <V = unknown>(value: V, index: number) => {\n  if (typeof value === \"string\") {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value?.[index];\n  }\n};\n\nconst mapResponsiveObject = (\n  direction: { [key: string]: CSSProperties[\"flexDirection\"] | null } | undefined | null,\n  main: ResponsiveFlexPosition,\n  cross: ResponsiveFlexPosition,\n) => {\n  return Object.fromEntries(\n    Object.entries(direction ?? []).map(([key, d]) => {\n      if (typeof d !== \"string\") {\n        throw new Error(\n          \"Values for a flex direction ResponsiveStyleObject must be strings, e.g. { xs: 'row', sm: 'column' }\",\n        );\n      }\n      if (d.startsWith(\"column\")) {\n        return [key, typeof cross === \"string\" ? cross : mapAlignment(cross)?.[key as keyof typeof cross]];\n      } else {\n        return [key, typeof main === \"string\" ? main : mapAlignment(main)?.[key as keyof typeof main]];\n      }\n    }),\n  );\n};\n\nconst resolveAlignment = (direction: ResponsiveFlexDirection, x: ResponsiveFlexPosition, y: ResponsiveFlexPosition) => {\n  if (typeof direction === \"string\") {\n    const isColumn = direction.startsWith(\"column\");\n    return {\n      justifyContent: mapAlignment(isColumn ? y : x),\n      alignItems: mapAlignment(isColumn ? x : y),\n    };\n  }\n\n  if (Array.isArray(direction)) {\n    return {\n      justifyContent: direction.map((d, i) => stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? y : x), i)),\n      alignItems: direction.map((d, i) => stringOrArrayValue(mapAlignment(d?.startsWith(\"column\") ? x : y), i)),\n    };\n  }\n\n  if (typeof direction === \"object\") {\n    return {\n      justifyContent: mapResponsiveObject(direction, x, y),\n      alignItems: mapResponsiveObject(direction, y, x),\n    };\n  }\n\n  return { justifyContent: x, alignItems: y };\n};\n\ntype CSSFlexDirection = CSSProperties[\"flexDirection\"];\nconst resolveDirection = <R extends ResponsiveFlexDirection = ResponsiveFlexDirection>(\n  row: ResponsiveFlexDirection | ResponsiveFlexBoolean | undefined | null,\n  column: ResponsiveFlexDirection | ResponsiveFlexBoolean | undefined | null,\n  reverse: boolean | undefined | null = false,\n  fallback: ResponsiveFlexDirection = \"row\",\n): R | CSSFlexDirection | undefined => {\n  /* Maps boolean responsive row/column props to flexDirection values */\n\n  const rowIsNullOrUndefined = row === null || row === undefined;\n  const columnIsNullOrUndefined = column === null || column === undefined;\n\n  if (rowIsNullOrUndefined && columnIsNullOrUndefined) {\n    return mapDirection(fallback, reverse) as R;\n  }\n\n  const rowIsFalse = row === false;\n  const columnIsFalse = column === false;\n\n  let chooseRow = [true, \"row\"].includes(row as _Any) || columnIsFalse || columnIsNullOrUndefined;\n  let chooseColumn = [true, \"column\"].includes(column as _Any) || rowIsFalse || rowIsNullOrUndefined;\n\n  if (rowIsFalse && !columnIsFalse) {\n    chooseRow = false;\n    chooseColumn = true;\n  } else if (columnIsFalse && !rowIsFalse) {\n    chooseColumn = false;\n    chooseRow = true;\n  } else if (chooseRow && chooseColumn) {\n    chooseColumn = false;\n  }\n\n  const rowIsArray = Array.isArray(row);\n  const columnIsArray = Array.isArray(column);\n\n  const rowIsObject = typeof row === \"object\" && !rowIsArray && !rowIsNullOrUndefined;\n  const columnIsObject = typeof column === \"object\" && !columnIsArray && !columnIsNullOrUndefined;\n\n  if ([!rowIsObject, !columnIsObject, !rowIsArray, !columnIsArray].every(Boolean)) {\n    return mapDirection(chooseColumn ? \"column\" : chooseRow ? \"row\" : fallback, reverse) as R;\n  }\n\n  const rowIsFalsy = !row || (rowIsArray && !row.length) || (rowIsObject && !Object.keys(row).length);\n  const columnIsFalsy = !column || (columnIsArray && !column.length) || (columnIsObject && !Object.keys(column).length);\n\n  if (rowIsArray && columnIsFalsy) {\n    return row.map((r) => resolveDirection(r, column, reverse, fallback)) as R;\n  }\n\n  if (columnIsArray && rowIsFalsy) {\n    return column.map((c) => resolveDirection(row, c, reverse, fallback)) as R;\n  }\n\n  if (rowIsArray && columnIsArray) {\n    const composite: ResponsiveFlexDirection = [];\n    if (row.length !== column.length) {\n      console.warn(\n        `When using Array type ResponsiveFlexDirection for both 'row' and 'column', they should be the same length (have the same number of breakpoints) - got row=${JSON.stringify(\n          row,\n        )} and column=${JSON.stringify(column)}. You probably want to use just one or the other.`,\n      );\n\n      const longestLength = Math.max(row.length, column.length);\n\n      for (let i = 0; i < longestLength; i++) {\n        const r = row[i] ?? (column[i] === \"column\" ? \"row\" : \"column\");\n        const c = column[i] ?? (row[i] === \"row\" ? \"column\" : \"row\");\n        composite.push(resolveDirection(r, c, reverse, fallback) as CSSFlexDirection);\n      }\n      return composite as R;\n    }\n\n    // if any of the values in each array are both true for the same array index, warn in the console and default to 'row'\n    return row.map((r, i) => {\n      let c = column[i];\n      if (r && c) {\n        console.warn(\n          `When using Array type ResponsiveFlexDirection for both 'row' and 'column', they cannot not both be true for the same breakpoint index - got row=${JSON.stringify(\n            row,\n          )} and column=${JSON.stringify(column)}. Defaulting to 'row' for conflicting indices.`,\n        );\n        c = false;\n      }\n      return resolveDirection(r, c, reverse, fallback) as CSSFlexDirection;\n    }) as R;\n  }\n\n  if (rowIsObject && columnIsFalsy) {\n    return Object.fromEntries(\n      Object.entries(row)\n        .filter(([, r]) => ![null, undefined].includes(r))\n        .map(([k, r]) => [k, resolveDirection(r, undefined, reverse, fallback)]),\n    ) as R;\n  }\n\n  if (columnIsObject && rowIsFalsy) {\n    return Object.fromEntries(\n      Object.entries(column)\n        .filter(([, r]) => ![null, undefined].includes(r))\n        .map(([k, c]) => [k, resolveDirection(undefined, c, reverse, fallback)]),\n    ) as R;\n  }\n\n  if (rowIsObject && columnIsObject) {\n    const composite: { [key: string]: CSSFlexDirection } = {};\n    const keys = new Set([...Object.keys(row), ...Object.keys(column)]);\n\n    for (const key of keys) {\n      const r = row[key];\n      const c = column[key];\n      if ([null, undefined].includes(r as _Any) && [null, undefined].includes(c as _Any)) {\n        // if both are empty, omit the key\n        continue;\n      }\n      composite[key] = resolveDirection(r, c, reverse, fallback) as CSSFlexDirection;\n    }\n    return composite as R;\n  }\n};\n\ntype MappableFlexProps = Partial<InferFlexProps> & Partial<BoxProps | GridProps | Grid2Props>;\n\nexport const mapFlexProps = <P extends MappableFlexProps = MappableFlexProps>(\n  props: P,\n  ref?: React.Ref<_Any> | null,\n  componentName: \"Box\" | \"Grid\" | \"Grid2\" = \"Box\",\n) => {\n  const { x, y, row, column, flexDirection, reverse, nowrap, ...rest } = props;\n\n  const direction = resolveDirection(row, column, reverse, flexDirection as ResponsiveFlexDirection);\n\n  const whiteSpace = nowrap ? \"nowrap\" : props.whiteSpace;\n  const flexProps = { display: rest.display || \"flex\", whiteSpace };\n  const className = `${props.className || \"\"} MuiFlex-root${componentName ? ` MuiFlex${componentName}-root` : \"\"}`;\n\n  const alignments = resolveAlignment(direction, x, y);\n\n  return {\n    ...rest,\n    ...flexProps,\n    ...alignments,\n    flexDirection: direction,\n    className,\n    ref,\n  } as unknown as P;\n};\n\nexport const _test = {\n  mapAlignment,\n  mapDirection,\n  mapFlexProps,\n  resolveDirection,\n};\n"],"names":["mapAlignment","alignment","Array","isArray","map","a","_typeof","Object","fromEntries","entries","_ref","_ref2","_slicedToArray","k","mapDirection","direction","reverse","arguments","length","undefined","includes","console","warn","concat","d","_ref3","_ref4","stringOrArrayValue","value","index","mapResponsiveObject","main","cross","_ref5","_ref6","key","Error","startsWith","_mapAlignment2","_mapAlignment3","resolveAlignment","x","y","isColumn","justifyContent","alignItems","i","resolveDirection","row","column","fallback","rowIsNullOrUndefined","columnIsNullOrUndefined","rowIsFalse","columnIsFalse","chooseRow","chooseColumn","rowIsArray","columnIsArray","rowIsObject","columnIsObject","every","Boolean","rowIsFalsy","keys","columnIsFalsy","r","c","composite","JSON","stringify","longestLength","Math","max","_row$i","_column$i","push","filter","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","Set","_toConsumableArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","mapFlexProps","props","ref","componentName","flexDirection","nowrap","rest","_objectWithoutProperties","_excluded","whiteSpace","flexProps","display","className","alignments","_objectSpread"],"mappings":"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"}